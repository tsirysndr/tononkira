on:
  release:
    types: [created]

jobs:
  release:
    name: release for linux-arm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - "aarch64-unknown-linux-gnu"
          - "armv7-unknown-linux-gnueabihf"
          - "arm-unknown-linux-gnueabi"
          - "armv7-linux-androideabi"
          - "aarch64-linux-android"
          - "i686-linux-android"
          - "x86_64-linux-android"

    steps:
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Checking out sources
        uses: actions/checkout@v1
      - name: Add OpenSSL package
        run: echo 'openssl = { version = "0.10.41", features = ["vendored"] }' | tee -a Cargo.toml
      - name: Install Android NDK
        if: matrix.target == 'aarch64-linux-android' || matrix.target == 'i686-linux-android' || matrix.target == 'x86_64-linux-android' || matrix.target == 'armv7-linux-androideabi'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip android-ndk-r25b-linux.zip
          echo "ANDROID_NDK_HOME=$GITHUB_WORKSPACE/android-ndk-r25b-linux" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/android-ndk-r25b-linux/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: Installing needed Ubuntu arm dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'armv7-unknown-linux-gnueabihf' || matrix.target == 'arm-unknown-linux-gnueabi'
        run: |
          sudo apt-get install -y -qq gcc-arm-linux-gnueabihf libc6-armhf-cross libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-arm64-cross libc6-dev-arm64-cross libc6-armel-cross libc6-dev-armel-cross binutils-arm-linux-gnueabi gcc-arm-linux-gnueabi libncurses5-dev build-essential bison flex libssl-dev bc pkg-config libudev-dev libssl-dev
      - name: Configure Rust FLAGS
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          echo "RUSTFLAGS=-C linker=arm-linux-gnueabihf-gcc -L/usr/arm-linux-gnueabihf/lib" >> $GITHUB_ENV
      - name: Configure Rust FLAGS
        if: matrix.target == 'arm-unknown-linux-gnueabi'
        run: |
          echo "RUSTFLAGS=-C linker=arm-linux-gnueabi-gcc -L/usr/arm-linux-gnueabi/lib" >> $GITHUB_ENV
      - name: Configure Rust FLAGS
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "RUSTFLAGS=-C linker=aarch64-linux-gnu-gcc -L/usr/aarch64-linux-gnu/lib" >> $GITHUB_ENV

      - name: Running cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          toolchain: stable
          args: --release --target ${{ matrix.target }}"
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf tononkira_${{ env.RELEASE_VERSION }}_${{ matrix.target }}.tar.gz tononkira
          shasum -a 512 tononkira_${{ env.RELEASE_VERSION }}_${{ matrix.target }}.tar.gz > tononkira_${{ env.RELEASE_VERSION }}_${{ matrix.target }}.tar.gz.sha512
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/tononkira_${{ env.RELEASE_VERSION }}_${{ matrix.target }}.tar.gz
            target/${{ matrix.target }}/release/tononkira_${{ env.RELEASE_VERSION }}_${{ matrix.target }}.tar.gz.sha512
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
